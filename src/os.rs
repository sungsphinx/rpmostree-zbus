//! # D-Bus interface proxy for: `org.projectatomic.rpmostree1.OS`
//!
//! This code was generated by `zbus-xmlgen` `4.1.0` from D-Bus introspection data.
//! Source: `org.projectatomic.rpmostree1.xml`.
//!
//! You may prefer to adapt it, instead of using it verbatim.
//!
//! More information can be found in the [Writing a client proxy] section of the zbus
//! documentation.
//!
//!
//! [Writing a client proxy]: https://dbus2.github.io/zbus/client.html
//! [D-Bus standard interfaces]: https://dbus.freedesktop.org/doc/dbus-specification.html#standard-interfaces,
use zbus::proxy;
#[proxy(interface = "org.projectatomic.rpmostree1.OS", assume_defaults = true)]
trait OS {
    /// AutomaticUpdateTrigger method
    fn automatic_update_trigger(
        &self,
        options: std::collections::HashMap<&str, &zbus::zvariant::Value<'_>>,
    ) -> zbus::Result<(bool, String)>;

    /// Cleanup method
    fn cleanup(&self, elements: &[&str]) -> zbus::Result<String>;

    /// ClearRollbackTarget method
    fn clear_rollback_target(
        &self,
        options: std::collections::HashMap<&str, &zbus::zvariant::Value<'_>>,
    ) -> zbus::Result<String>;

    /// Deploy method
    fn deploy(
        &self,
        revision: &str,
        options: std::collections::HashMap<&str, &zbus::zvariant::Value<'_>>,
    ) -> zbus::Result<String>;

    /// DownloadDeployRpmDiff method
    fn download_deploy_rpm_diff(&self, revision: &str, packages: &[&str]) -> zbus::Result<String>;

    /// DownloadRebaseRpmDiff method
    fn download_rebase_rpm_diff(&self, refspec: &str, packages: &[&str]) -> zbus::Result<String>;

    /// DownloadUpdateRpmDiff method
    fn download_update_rpm_diff(&self) -> zbus::Result<String>;

    /// FinalizeDeployment method
    fn finalize_deployment(
        &self,
        options: std::collections::HashMap<&str, &zbus::zvariant::Value<'_>>,
    ) -> zbus::Result<String>;

    /// GetCachedDeployRpmDiff method
    fn get_cached_deploy_rpm_diff(
        &self,
        revision: &str,
        packages: &[&str],
    ) -> zbus::Result<(
        Vec<(
            String,
            u32,
            std::collections::HashMap<String, zbus::zvariant::OwnedValue>,
        )>,
        std::collections::HashMap<String, zbus::zvariant::OwnedValue>,
    )>;

    /// GetCachedRebaseRpmDiff method
    fn get_cached_rebase_rpm_diff(
        &self,
        refspec: &str,
        packages: &[&str],
    ) -> zbus::Result<(
        Vec<(
            String,
            u32,
            std::collections::HashMap<String, zbus::zvariant::OwnedValue>,
        )>,
        std::collections::HashMap<String, zbus::zvariant::OwnedValue>,
    )>;

    /// GetCachedUpdateRpmDiff method
    fn get_cached_update_rpm_diff(
        &self,
        deployid: &str,
    ) -> zbus::Result<(
        Vec<(
            String,
            u32,
            std::collections::HashMap<String, zbus::zvariant::OwnedValue>,
        )>,
        std::collections::HashMap<String, zbus::zvariant::OwnedValue>,
    )>;

    /// GetDeploymentBootConfig method
    fn get_deployment_boot_config(
        &self,
        deployid: &str,
        is_pending: bool,
    ) -> zbus::Result<std::collections::HashMap<String, zbus::zvariant::OwnedValue>>;

    /// GetDeploymentsRpmDiff method
    fn get_deployments_rpm_diff(
        &self,
        deployid0: &str,
        deployid1: &str,
    ) -> zbus::Result<
        Vec<(
            String,
            u32,
            std::collections::HashMap<String, zbus::zvariant::OwnedValue>,
        )>,
    >;

    /// GetPackages method
    fn get_packages(
        &self,
        names: &[&str],
    ) -> zbus::Result<Vec<std::collections::HashMap<String, zbus::zvariant::OwnedValue>>>;

    /// InitramfsEtc method
    fn initramfs_etc(
        &self,
        track: &[&str],
        untrack: &[&str],
        untrack_all: bool,
        force_sync: bool,
        options: std::collections::HashMap<&str, &zbus::zvariant::Value<'_>>,
    ) -> zbus::Result<String>;

    /// KernelArgs method
    fn kernel_args(
        &self,
        existing_kernel_arg_string: &str,
        kernel_args_added: &[&str],
        kernel_args_replaced: &[&str],
        kernel_args_removed: &[&str],
        options: std::collections::HashMap<&str, &zbus::zvariant::Value<'_>>,
    ) -> zbus::Result<String>;

    /// ListRepos method
    fn list_repos(
        &self,
    ) -> zbus::Result<Vec<std::collections::HashMap<String, zbus::zvariant::OwnedValue>>>;

    /// ModifyYumRepo method
    fn modify_yum_repo(
        &self,
        repo_id: &str,
        settings: std::collections::HashMap<&str, &str>,
    ) -> zbus::Result<String>;

    /// PkgChange method
    fn pkg_change(
        &self,
        options: std::collections::HashMap<&str, &zbus::zvariant::Value<'_>>,
        packages_added: &[&str],
        packages_removed: &[&str],
    ) -> zbus::Result<String>;

    /// Rebase method
    fn rebase(
        &self,
        options: std::collections::HashMap<&str, &zbus::zvariant::Value<'_>>,
        refspec: &str,
        packages: &[&str],
    ) -> zbus::Result<String>;

    /// RefreshMd method
    fn refresh_md(
        &self,
        options: std::collections::HashMap<&str, &zbus::zvariant::Value<'_>>,
    ) -> zbus::Result<String>;

    /// Rollback method
    fn rollback(
        &self,
        options: std::collections::HashMap<&str, &zbus::zvariant::Value<'_>>,
    ) -> zbus::Result<String>;

    /// Search method
    fn search(
        &self,
        names: &[&str],
    ) -> zbus::Result<Vec<std::collections::HashMap<String, zbus::zvariant::OwnedValue>>>;

    /// SetInitramfsState method
    fn set_initramfs_state(
        &self,
        regenerate: bool,
        args: &[&str],
        options: std::collections::HashMap<&str, &zbus::zvariant::Value<'_>>,
    ) -> zbus::Result<String>;

    /// UpdateDeployment method
    fn update_deployment(
        &self,
        modifiers: std::collections::HashMap<&str, &zbus::zvariant::Value<'_>>,
        options: std::collections::HashMap<&str, &zbus::zvariant::Value<'_>>,
    ) -> zbus::Result<String>;

    /// Upgrade method
    fn upgrade(
        &self,
        options: std::collections::HashMap<&str, &zbus::zvariant::Value<'_>>,
    ) -> zbus::Result<String>;

    /// WhatProvides method
    fn what_provides(
        &self,
        provides: &[&str],
    ) -> zbus::Result<Vec<std::collections::HashMap<String, zbus::zvariant::OwnedValue>>>;

    /// BootedDeployment property
    #[zbus(property)]
    fn booted_deployment(
        &self,
    ) -> zbus::Result<std::collections::HashMap<String, zbus::zvariant::OwnedValue>>;

    /// CachedUpdate property
    #[zbus(property)]
    fn cached_update(
        &self,
    ) -> zbus::Result<std::collections::HashMap<String, zbus::zvariant::OwnedValue>>;

    /// DefaultDeployment property
    #[zbus(property)]
    fn default_deployment(
        &self,
    ) -> zbus::Result<std::collections::HashMap<String, zbus::zvariant::OwnedValue>>;

    /// HasCachedUpdateRpmDiff property
    #[zbus(property)]
    fn has_cached_update_rpm_diff(&self) -> zbus::Result<bool>;

    /// Name property
    #[zbus(property)]
    fn name(&self) -> zbus::Result<String>;

    /// RollbackDeployment property
    #[zbus(property)]
    fn rollback_deployment(
        &self,
    ) -> zbus::Result<std::collections::HashMap<String, zbus::zvariant::OwnedValue>>;
}

//! # D-Bus interface proxy for: `org.projectatomic.rpmostree1.Transaction`
//!
//! This code was generated by `zbus-xmlgen` `4.1.0` from D-Bus introspection data.
//! Source: `org.projectatomic.rpmostree1.xml`.
//!
//! You may prefer to adapt it, instead of using it verbatim.
//!
//! More information can be found in the [Writing a client proxy] section of the zbus
//! documentation.
//!
//!
//! [Writing a client proxy]: https://dbus2.github.io/zbus/client.html
//! [D-Bus standard interfaces]: https://dbus.freedesktop.org/doc/dbus-specification.html#standard-interfaces,
use zbus::proxy;
#[proxy(
    interface = "org.projectatomic.rpmostree1.Transaction",
    assume_defaults = true
)]
trait Transaction {
    /// Cancel method
    fn cancel(&self) -> zbus::Result<()>;

    /// Start method
    fn start(&self) -> zbus::Result<bool>;

    /// DownloadProgress signal
    #[zbus(signal)]
    fn download_progress(
        &self,
        time: (u64, u64),
        outstanding: (u32, u32),
        metadata: (u32, u32, u32),
        delta: (u32, u32, u32, u64),
        content: (u32, u32),
        transfer: (u64, u64),
    ) -> zbus::Result<()>;

    /// Finished signal
    #[zbus(signal)]
    fn finished(&self, success: bool, error_message: &str) -> zbus::Result<()>;

    /// Message signal
    #[zbus(signal)]
    fn message(&self, text: &str) -> zbus::Result<()>;

    /// PercentProgress signal
    #[zbus(signal)]
    fn percent_progress(&self, text: &str, percentage: u32) -> zbus::Result<()>;

    /// ProgressEnd signal
    #[zbus(signal)]
    fn progress_end(&self) -> zbus::Result<()>;

    /// SignatureProgress signal
    #[zbus(signal)]
    fn signature_progress(
        &self,
        signature: Vec<zbus::zvariant::Value<'_>>,
        commit: &str,
    ) -> zbus::Result<()>;

    /// TaskBegin signal
    #[zbus(signal)]
    fn task_begin(&self, text: &str) -> zbus::Result<()>;

    /// TaskEnd signal
    #[zbus(signal)]
    fn task_end(&self, text: &str) -> zbus::Result<()>;

    /// InitiatingClientDescription property
    #[zbus(property)]
    fn initiating_client_description(&self) -> zbus::Result<String>;

    /// Title property
    #[zbus(property)]
    fn title(&self) -> zbus::Result<String>;
}
